import React, { useState, useEffect } from 'react';
import { View, StyleSheet, TextInput, Button, Modal, Text, TouchableOpacity } from 'react-native';
import MapView, { Marker, Callout } from 'react-native-maps';
import { firestore } from '../../FirebaseConfig';
import firebase from 'firebase/app';

const StickyNotesMap = () => {
  const [region, setRegion] = useState({
    latitude: 37.78825,
    longitude: -122.4324,
    latitudeDelta: 0.0922,
    longitudeDelta: 0.0421,
  });
  const [notes, setNotes] = useState([]);
  const [newNote, setNewNote] = useState('');
  const [modalVisible, setModalVisible] = useState(false);
  const [selectedLocation, setSelectedLocation] = useState(null);

  useEffect(() => {
    const unsubscribe = firestore.collection('notes').onSnapshot((snapshot) => {
      const fetchedNotes = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setNotes(fetchedNotes);
    });

    return () => unsubscribe();
  }, []);

  const handleLongPress = (e) => {
    setSelectedLocation(e.nativeEvent.coordinate);
    setModalVisible(true);
  };

  const handlePostNote = async () => {
    if (newNote.trim().length > 0 && selectedLocation) {
      await firestore.collection('notes').add({
        content: newNote,
        latitude: selectedLocation.latitude,
        longitude: selectedLocation.longitude,
        createdAt: firebase.firestore.FieldValue.serverTimestamp(),
      });
      setNewNote('');
      setModalVisible(false);
      setSelectedLocation(null);
    }
  };

  return (
    <View style={styles.container}>
      <MapView
        style={styles.map}
        region={region}
        onRegionChangeComplete={setRegion}
        onLongPress={handleLongPress}
      >
        {notes.map((note) => (
          <Marker
            key={note.id}
            coordinate={{ latitude: note.latitude, longitude: note.longitude }}
          >
            <Callout>
              <Text>{note.content}</Text>
            </Callout>
          </Marker>
        ))}
      </MapView>
      <Modal visible={modalVisible} transparent animationType="slide">
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <TextInput
              style={styles.input}
              placeholder="Write your note..."
              value={newNote}
              onChangeText={setNewNote}
            />
            <Button title="Post Note" onPress={handlePostNote} />
            <Button title="Cancel" onPress={() => setModalVisible(false)} />
          </View>
        </View>
      </Modal>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  map: {
    flex: 1,
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalContent: {
    width: '80%',
    padding: 20,
    backgroundColor: 'white',
    borderRadius: 10,
    alignItems: 'center',
  },
  input: {
    width: '100%',
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: 16,
    paddingHorizontal: 8,
  },
});

export default StickyNotesMap;
